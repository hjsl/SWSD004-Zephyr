/dts-v1/;
#include <st/wb/stm32wb55Xg.dtsi>
#include <st/wb/stm32wb55cgux-pinctrl.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <lr11xx_bindings_def.h>

/ {
	model = "Semtech LR1110TRK1BKS Lora Edge Tracker Reference Design";
	compatible = "semtech,lr1110trk1bks";

	chosen {
		zephyr,console = &usart1;
		zephyr,shell-uart = &usart1;
		zephyr,sram = &sram0;
		zephyr,flash = &flash0;
		zephyr,code-partition = &slot0_partition;
	};

	leds: leds {
		compatible = "gpio-leds";
		yellow_led_1: led_0 {
			gpios = <&gpioe 4 GPIO_ACTIVE_HIGH>;
			label = "User LED1";
		};
		red_led_2: led_1 {
			gpios = <&gpiob 5 GPIO_ACTIVE_HIGH>;
			label = "User LED2";
		};
	};

	gpio_keys {
		compatible = "gpio-keys";
		user_button_1: button_0 {
			label = "SW1";
			gpios = <&gpioh 3 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
			zephyr,code = <INPUT_KEY_0>;
		};
		user_button_2: button_1 {
			label = "SW2";
			gpios = <&gpiob 9 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
			zephyr,code = <INPUT_KEY_0>;
		};
		user_button_3: button_2 {
			label = "SW3";
			gpios = <&gpiob 2 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
			zephyr,code = <INPUT_KEY_0>;
		};
	};

	aliases {
		led0 = &red_led_2;
		sw0 = &user_button_1;
		sw1 = &user_button_2;
		sw2 = &user_button_3;
		watchdog0 = &iwdg;
		die-temp0 = &die_temp;
		volt-sensor0 = &vref;
		volt-sensor1 = &vbat;
	};

	/* Regulator controlling the hall sensor power supply. */
	hall-sensor-enable {
		compatible = "regulator-fixed";
		regulator-name = "hall-sensor-enable";
		enable-gpios = <&gpioa 1 GPIO_ACTIVE_HIGH>;
		regulator-boot-on;
	};

	/* Regulator controlling the HF switch power supply. */
	/* hf_rf_switch_enable: hf-rf-switch-enable {
		compatible = "regulator-fixed";
		regulator-name = "hf-rf-switch-enable";
		enable-gpios = <&gpioa 3 GPIO_ACTIVE_HIGH>;
		regulator-boot-on;
	}; */

	/* Control the HF switch RF path. */
	hf_rf_switch_ctrl: hf-rf-switch-ctrl {
		compatible = "psemi,pe4259";
		ctrl-gpios = <&gpioa 15 GPIO_ACTIVE_HIGH>;
		supply-gpios = <&gpioa 3 GPIO_ACTIVE_HIGH>;
	};

	/* Select the PCB or patch antenna. */
	gnss-rf-switch-ctrl {
		compatible = "psemi,pe4259";
		ctrl-gpios = <&gpiob 8 GPIO_ACTIVE_HIGH>;
	};
};

&die_temp {
	status = "okay";
};

&clk_lsi1 {
	status = "okay";
};

&clk_hse {
	status = "okay";
};

&clk_lse {
	status = "okay";
};

&clk_hsi48 {
	status = "okay";
};

&clk48 {
	/* Node is disabled by default as default source is HSI48 */
	/* To select another clock, enable the node */
	clocks = <&rcc STM32_SRC_HSI48 CLK48_SEL(0)>;
};

&rcc {
	clocks = <&clk_hse>;
	clock-frequency = <DT_FREQ_M(32)>;
	cpu1-prescaler = <1>;
	cpu2-prescaler = <1>;
	ahb4-prescaler = <1>;
	apb1-prescaler = <1>;
	apb2-prescaler = <1>;
};

&usart1 {
	pinctrl-0 = <&usart1_tx_pa9 &usart1_rx_pa10>;
	pinctrl-names = "default";
	current-speed = <115200>;
	status = "okay";
};

&i2c1 {
	pinctrl-0 = <&i2c1_scl_pb6 &i2c1_sda_pb7>;
	pinctrl-names = "default";
	status = "okay";
	clock-frequency = <I2C_BITRATE_FAST>;

	lis2de12: lis2de12@32 {
		compatible = "st,lis2de12";
		reg = <0x32>;
		int1-gpios = <&gpiob 1 GPIO_ACTIVE_HIGH>;
	};
};

&rtc {
	clocks = <&rcc STM32_CLOCK_BUS_APB1 0x00000400>,
		 <&rcc STM32_SRC_LSI RTC_SEL(2)>;
	status = "okay";

	backup_regs {
		status = "okay";
	};
};

&spi1 {
	pinctrl-0 = <&spi1_sck_pa5 &spi1_miso_pa6 &spi1_mosi_pa7>;
	pinctrl-names = "default";
	status = "okay";

    	cs-gpios = <&gpioa 4 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
	lr11xx: lr11xx@0 {
        	compatible = "irnas,lr11xx";
        	reg = <0>;
        	spi-max-frequency = <4000000>;

        	reset-gpios = <&gpioa 0 GPIO_ACTIVE_LOW>;
        	gps-lna-en-gpios = <&gpioa 29 GPIO_ACTIVE_HIGH>;
        	busy-gpios = <&gpiob 0 GPIO_ACTIVE_HIGH>;
        	event-gpios = <&gpiob 4 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>;

		lf-tx-path = <LR11XX_TX_PATH_LF_LP_HP>;

        	tcxo-supply = <LR11XX_TCXO_SUPPLY_1_8V>;
        	tcxo-wakeup-time = <5>;

        	lf-clk = <LR11XX_LFCLK_RC>;
        	reg-mode = <LR11XX_REG_MODE_DCDC>;

        	rf-sw-enable = <(LR11XX_DIO5 | LR11XX_DIO6 | LR11XX_DIO7)>;
        	rf-sw-rx-mode = <LR11XX_DIO5>;
        	rf-sw-tx-mode = <(LR11XX_DIO5 | LR11XX_DIO6)>;
        	rf-sw-tx-hp-mode = <LR11XX_DIO6>;
        	rf-sw-gnss-mode = <LR11XX_DIO7>;
	};
};

&iwdg {
	status = "okay";
};

&lptim1 {
	clocks = <&rcc STM32_CLOCK_BUS_APB1 0x80000000>,
		 <&rcc STM32_SRC_LSE LPTIM1_SEL(3)>;
	status = "okay";
};

zephyr_udc0: &usb {
	status = "okay";
	pinctrl-0 = <&usb_dm_pa11 &usb_dp_pa12>;
	pinctrl-names = "default";
};

&rng {
	status = "okay";
};

&flash0 {
	partitions {
		compatible = "fixed-partitions";
		#address-cells = <1>;
		#size-cells = <1>;

		/*
		 * Configure partitions while leaving space for M0 BLE f/w
		 * Since STM32WBCube release V1.13.2, only _HCIOnly_ f/w are supported.
		 * These FW are expected to be located not before 0x080DB000
		 * Current partition is using the first 876K of the flash for M4
		 */

		boot_partition: partition@0 {
			label = "mcuboot";
			reg = <0x00000000 DT_SIZE_K(48)>;
		};
		slot0_partition: partition@c000 {
			label = "image-0";
			reg = <0x0000c000 DT_SIZE_K(400)>;
		};
		slot1_partition: partition@70000 {
			label = "image-1";
			reg = <0x00070000 DT_SIZE_K(400)>;
		};
		scratch_partition: partition@d4000 {
			label = "image-scratch";
			reg = <0x000d4000 DT_SIZE_K(16)>;
		};
		storage_partition: partition@d8000 {
			label = "storage";
			reg = <0x000d8000 DT_SIZE_K(8)>;
		};

	};
};

&vref {
	status = "okay";
};

&vbat {
	status = "okay";
};
